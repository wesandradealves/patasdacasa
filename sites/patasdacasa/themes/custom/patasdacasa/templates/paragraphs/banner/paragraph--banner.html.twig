{#
/**
 * @file
 * Default theme implementation to display a paragraph.
 *
 * Available variables:
 * - paragraph: Full paragraph entity.
 *   Only method names starting with "get", "has", or "is" and a few common
 *   methods such as "id", "label", and "bundle" are available. For example:
 *   - paragraph.getCreatedTime() will return the paragraph creation timestamp.
 *   - paragraph.id(): The paragraph ID.
 *   - paragraph.bundle(): The type of the paragraph, for example, "image" or "text".
 *   - paragraph.getOwnerId(): The user ID of the paragraph author.
 *   See Drupal\paragraphs\Entity\Paragraph for a full list of public properties
 *   and methods for the paragraph object.
 * - content: All paragraph items. Use {{ content }} to print them all,
 *   or print a subset such as {{ content.field_example }}. Use
 *   {{ content|without('field_example') }} to temporarily suppress the printing
 *   of a given child element.
 * - attributes: HTML attributes for the containing element.
 *   The attributes.class element may contain one or more of the following
 *   classes:
 *   - paragraphs: The current template type (also known as a "theming hook").
 *   - paragraphs--type-[type]: The current paragraphs type. For example, if the paragraph is an
 *     "Image" it would result in "paragraphs--type--image". Note that the machine
 *     name will often be in a short form of the human readable label.
 *   - paragraphs--view-mode--[view_mode]: The View Mode of the paragraph; for example, a
 *     preview would result in: "paragraphs--view-mode--preview", and
 *     default: "paragraphs--view-mode--default".
 * - view_mode: View mode; for example, "preview" or "full".
 * - logged_in: Flag for authenticated user status. Will be true when the
 *   current user is a logged-in member.
 * - is_admin: Flag for admin user status. Will be true when the current user
 *   is an administrator.
 *
 * @see template_preprocess_paragraph()
 *
 * @ingroup themeable
 */
#}
{{ attach_library('patasdacasa/banner') }}
{% set image = content.field_page_banner_image|render|striptags|trim %}
{% set image_mobile = content.field_page_banner_image_mobile|render|striptags|trim %}
{% set style = content.field_page_banner_style|render|striptags|trim|lower|replace({' ': '-'}) %}
{%
  set classes = [
    'overflow-hidden',
    'hero-type-' ~ style,
    'hero',
    'paragraph',
    'paragraph--type--' ~ paragraph.bundle|clean_class,
    view_mode ? 'paragraph--view-mode--' ~ view_mode|clean_class,
    not paragraph.isPublished() ? 'paragraph--unpublished'
  ]
%}
{% block content %}
  <section{{ attributes.addClass(classes) }} data-type="{{style}}">
      <div class="{%if style == 'full-width' %} container-fluid {%else%} container {%endif%}">
        <div class="hero-inner d-flex flex-column align-items-center justify-content-end justify-content-md-center">
          <div class="row flex-column justify-content-center align-items-end align-items-md-start container-fluid">
            <h2 class="col-5 col-lg-3 col-md-4 pb-4 pb-md-0 hero-title pe-md-5 text-end text-md-start">{{title}}</h2>
          </div>
        </div>
        <picture>
            <source media="(min-width:768px)" srcset="{{ image }}">
            <img src="{{ image_mobile }}">
        </picture>            
      </div>
  </section>
{% endblock %}
