    {#
    /**
     * @file
     * Theme override to display a node.
     *
     * Available variables:
     * - node: The node entity with limited access to object properties and methods.
     *   Only method names starting with "get", "has", or "is" and a few common
     *   methods such as "id", "label", and "bundle" are available. For example:
     *   - node.getCreatedTime() will return the node creation timestamp.
     *   - node.hasField('field_example') returns TRUE if the node bundle includes
     *     field_example. (This does not indicate the presence of a value in this
     *     field.)
     *   - node.isPublished() will return whether the node is published or not.
     *   Calling other methods, such as node.delete(), will result in an exception.
     *   See \Drupal\node\Entity\Node for a full list of public properties and
     *   methods for the node object.
     * - label: The title of the node.
     * - content: All node items. Use {{ content }} to print them all,
     *   or print a subset such as {{ content.field_example }}. Use
     *   {{ content|without('field_example') }} to temporarily suppress the printing
     *   of a given child element.
     * - author_picture: The node author user entity, rendered using the "compact"
     *   view mode.
     * - metadata: Metadata for this node.
     * - date: Themed creation date field.
     * - author_name: Themed author name field.
     * - url: Direct URL of the current node.
     * - display_submitted: Whether submission information should be displayed.
     * - attributes: HTML attributes for the containing element.
     *   The attributes.class element may contain one or more of the following
     *   classes:
     *   - node: The current template type (also known as a "theming hook").
     *   - node--type-[type]: The current node type. For example, if the node is an
     *     "Article" it would result in "node--type-article". Note that the machine
     *     name will often be in a short form of the human readable label.
     *   - node--view-mode-[view_mode]: The View Mode of the node; for example, a
     *     teaser would result in: "node--view-mode-teaser", and
     *     full: "node--view-mode-full".
     *   The following are controlled through the node publishing options.
     *   - node--promoted: Appears on nodes promoted to the front page.
     *   - node--sticky: Appears on nodes ordered above other non-sticky nodes in
     *     teaser listings.
     *   - node--unpublished: Appears on unpublished nodes visible only to site
     *     admins.
     * - title_attributes: Same as attributes, except applied to the main title
     *   tag that appears in the template.
     * - content_attributes: Same as attributes, except applied to the main
     *   content tag that appears in the template.
     * - author_attributes: Same as attributes, except applied to the author of
     *   the node tag that appears in the template.
     * - title_prefix: Additional output populated by modules, intended to be
     *   displayed in front of the main title tag that appears in the template.
     * - title_suffix: Additional output populated by modules, intended to be
     *   displayed after the main title tag that appears in the template.
     * - view_mode: View mode; for example, "teaser" or "full".
     * - teaser: Flag for the teaser state. Will be true if view_mode is 'teaser'.
     * - page: Flag for the full page state. Will be true if view_mode is 'full'.
     * - readmore: Flag for more state. Will be true if the teaser content of the
     *   node cannot hold the main body content.
     * - logged_in: Flag for authenticated user status. Will be true when the
     *   current user is a logged-in member.
     * - is_admin: Flag for admin user status. Will be true when the current user
     *   is an administrator.
     *
     * @see template_preprocess_node()
     */
    #}
    {{ attach_library('patasdacasa/node') }}

    {%
      set classes = [
        'post',
        'node',
        'node--type-' ~ node.bundle|clean_class,
        node.isPromoted() ? 'node--promoted',
        node.isSticky() ? 'node--sticky',
        not node.isPublished() ? 'node--unpublished',
        view_mode ? 'node--view-mode-' ~ view_mode|clean_class,
      ]
    %}
    {% set created_date = node.getCreatedTime %}
    {% set updated_date = node.getChangedTime %}
    {{ attach_library('classy/node') }}
    <article{{ attributes.addClass(classes) }}>
        <header class="post-header">
            <span data-theme="{{term.parent ? term.parent.field_taxonomy_theme : term.field_taxonomy_theme}}" class="tag tag--{{term.tid}}" style="background-color:{{term.parent ? term.parent.field_taxonomy_theme : term.field_taxonomy_theme}}">{{term.name}}</span>
            <h2 class="post-header--title mt-2 mb-2" style="color: {{term.parent ? term.parent.field_taxonomy_theme : term.field_taxonomy_theme}}">{{node.getTitle}}</h2>
            <p class="post-header--bottom">
              <b>Atualizado - {{ updated_date|format_date('custom', 'd M Y') ~ ' - ' ~ updated_date|format_date('custom', 'H i')|split(' ')[0] ~'h'~updated_date|format_date('custom', 'H i')|split(' ')[1] }}</b><br/>
              Publicado - {{ created_date|format_date('custom', 'd M Y') ~ ' - ' ~ created_date|format_date('custom', 'H i')|split(' ')[0] ~'h'~created_date|format_date('custom', 'H i')|split(' ')[1] }}
            </p>
        </header>
        <div class="d-flex flex-column flex-md-row flex-wrap align-items-stretch">
          {% include directory ~ '/templates/partials/author-block/author-block.html.twig' with {
              data: author,
              classes: especialista ? ['col-12', 'col-md-6', 'ps-md-4'] : ['col-12']
          } %}

          {% if especialista %}
            {% include directory ~ '/templates/partials/author-block/author-block.html.twig' with {
                data: especialista,
                type: 'especialista',
                classes: ['col-12', 'col-md-6']
            } %}
          {% endif %}
        </div>
        <div class="post-image">
          <img width="100%" src="{{ file_url(content.field_image['#items'].entity.uri.value) }}" alt="{{ node.field_image.alt }}" />
          <span class="tag" style="background-color: {{term.parent ? term.parent.field_taxonomy_theme : term.field_taxonomy_theme}}">{{ node.field_image.alt|slice(0, 140)|raw  }}</span>
        </div>
        <div class="post-content mt-5 d-flex align-items-stretch">
          <div class="post-content--inner flex-fill">
            {{ drupal_block("social_sharing_buttons_block") }}

            {% set contentArray = node.body.value|raw|split("<p>") %}

            {% if contentArray|length >= 2 %}
              {% for key, text in contentArray %}
                {% set key = key + 1 %}

                {% if key == contentArray|length %}
                  <div class="d-flex flex-wrap w-100">
                    <div class="col-12 col-md-6">
                      {{text|raw}}
                    </div>
                  </div>

                  {% if node.fields.field_exibir_quiz.target_id %}
                    <div class="bloco-quiz">
                      <div class="formulario-quiz">
                        {{getQuiz(node.fields.field_exibir_quiz.target_id)|raw}}
                      </div>
                      <div class="html-quiz">

                      </div>
                      <div class="resultado-quiz">

                      </div>
                    </div>
                  {% endif %}

                {% else %}
                  {{text|raw}}
                {% endif %}
              {% endfor %}
            {% else %}
              {{ node.body.value|raw }}
            {% endif %}
          </div>
          {% include directory ~ '/templates/partials/sidebar/sidebar.html.twig' %}
        </div>
        {% include directory ~ '/templates/partials/sidebar/bottombar.html.twig' %}

        {# {{ drupal_view('archive', 'block_4', term.tid) }} #}

        <style>
          .post-content--inner h1,
          .post-content--inner h2,
          .post-content--inner h3,
          .post-content--inner h4,
          .post-content--inner h5,
          .post-content--inner h6,
          .post-content--inner a {
            color: {{term.parent.field_taxonomy_theme}};
          }
        </style>
    </article>
